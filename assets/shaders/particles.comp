#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle {
	vec2 pos;
	vec2 vel;
};

const float attractionFactor = 5;
const float frictionFactor = 0.7;

layout(local_size_x = 16) in;
layout(std430, set = 0, binding = 0) buffer Particles {
	Particle particles[];
};

layout(set = 0, binding = 1) uniform UBO {
	float deltaT; // time delta in seconds
	float attract; // attraction factor
	vec2 mousePos; // attraction pos
} ubo;

/*
layout(push_constant) uniform UBO {
	float deltaT; // time delta in seconds
	float attract; // attraction factor
	vec2 mousePos; // attraction pos
} ubo;
*/

vec2 attraction(vec2 pos, vec2 attractPos)
{
	vec2 delta = attractPos - pos;
	// float dDampedDot = dot(delta, delta);
	float invDist = 1.0f / length(delta);
	// float invDistCubed = invDist*invDist*invDist;
	return delta * invDist;
}

void topBorder(inout vec2 pos, inout vec2 vel) {

}

void bottomBorder(inout vec2 pos, inout vec2 vel) {

}

void rightBorder(inout vec2 pos, inout vec2 vel) {

}

void leftBorder(inout vec2 pos, inout vec2 vel) {

}

void main() {
	// Current SSBO index
	uint index = gl_GlobalInvocationID.x;

	// Read position and velocity
	vec2 pos = particles[index].pos;
	vec2 vel = particles[index].vel;

	// Calculate new velocity depending on attraction point
	// apply fraction
	vel += attractionFactor * ubo.attract * ubo.deltaT * attraction(pos, ubo.mousePos);
	vel *= 1 - (0.7 * ubo.deltaT);

	// Move by velocity
	pos += vel * ubo.deltaT;

	// border
	if(pos.x < -1.0) {
		leftBorder(pos, vel);
	} else if(pos.x > 1.0) {
		rightBorder(pos, vel);
	}

	if(pos.y < -1.0) {
		topBorder(pos, vel);
	} else if(pos.y > 1.0) {
		bottomBorder(pos, vel);
	}

	// Write back
	particles[index].pos = pos;
	particles[index].vel = vel;
}
